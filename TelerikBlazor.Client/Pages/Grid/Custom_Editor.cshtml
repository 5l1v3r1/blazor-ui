@page "/grid/custom-editor"

@using Telerik.Blazor
@using Telerik.Blazor.Components.Grid
@using TelerikBlazor.Shared
@inject HttpClient Http

<TelerikGrid Data=@GridData EditMode="inline"
           Pageable="true" PageSize=@PageSize>
    <TelerikGridColumns>
        <TelerikGridColumn Field=@nameof(Product.ProductName) Title="Product Name">
            <EditorTemplate>
                @{
                    ProductToEdit = context as Product;
                    <select class="form-control d-inline" style="height: 30px" onchange=@SaveItem value=@ProductToEdit.ProductName>
                        @foreach (Product item in GridData.ToList())
                        {
                            <option value=@item.ProductName>@item.ProductName</option>
                        }
                    </select>
                }
            </EditorTemplate>
        </TelerikGridColumn>
        <TelerikGridColumn Field=@nameof(Product.UnitPrice) Title="Unit Price" />
        <TelerikGridColumn Field=@nameof(Product.UnitsInStock) Title="Units In Stock" />
        <TelerikGridCommandColumn>
            <TelerikGridCommandButton Command="Edit" Icon="edit">Edit</TelerikGridCommandButton>
            <TelerikGridCommandButton Command="Update" Icon="save" ShowInEdit="true" OnClick="UpdateItem">Update</TelerikGridCommandButton>
            <TelerikGridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true" OnClick="CancelItem">Cancel</TelerikGridCommandButton>
        </TelerikGridCommandColumn>
    </TelerikGridColumns>
</TelerikGrid>

@functions {
    public IEnumerable<Product> GridData { get; set; }
    public Product ProductToEdit { get; set; }
    int PageSize = 15;
    
    protected override void OnInit()
    {
        List<Product> products = new List<Product>();
        for (int i = 0; i < 100; i++)
        {
            products.Add(new Product()
            {
                ProductId = i,
                ProductName = "Product" + i.ToString(),
                SupplierId = i,
                UnitPrice = (decimal)(i * 3.14),
                UnitsInStock = (short)(i * 1),
            });
        }

        GridData = products.AsQueryable();
    }

    private void SaveItem(UIChangeEventArgs args)
    {
        ProductToEdit.ProductName = args.Value.ToString();
        StateHasChanged();
    }

    private void UpdateItem(GridCommandEventArgs args)
    {
        
    }

    private void CancelItem(GridCommandEventArgs args)
    {
    }
}
