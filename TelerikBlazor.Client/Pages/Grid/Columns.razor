@page "/grid/columns"

@using Telerik.Blazor.Components.Grid
@using Telerik.Blazor.Components.Button
@using TelerikBlazor.Shared
@inject HttpClient Http

<h4> Columns </h4>

<div class="d-flex flex-row my-2">
    <TelerikButton OnClick="@ToggleColumn">Show / Hide Summary Column</TelerikButton>
    <TelerikButton Enabled="@IsAddEnabled" OnClick="@AddColumn">Add TemperatureF Column</TelerikButton>
    <TelerikButton Enabled="@IsDeleteEnabled" OnClick="@DeleteColumn">Delete TemperatureF Column</TelerikButton>
</div>

<TelerikGrid Data=@GridData ref="Grid">
    <TelerikGridColumns>
        <TelerikGridColumn Field="Date">
            <Template>
                @((context as WeatherForecast).Date.ToString("MMMM dd, yyyy"))
            </Template>
        </TelerikGridColumn>
        <TelerikGridColumn Field="TemperatureC" />
        @if (columnVisible)
        {
            <TelerikGridColumn Field="Summary" />
        }
    </TelerikGridColumns>
</TelerikGrid>

@functions {
    TelerikGrid<WeatherForecast> Grid;
    TelerikGridColumn Fahrenheit = new TelerikGridColumn
    {
        Field = "TemperatureF"
    };
    bool columnVisible = true;
    bool IsAddEnabled = true;
    bool IsDeleteEnabled = false;
    public IEnumerable<WeatherForecast> GridData { get; set; }

    protected override async Task OnInitAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        GridData = await Http.GetJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts");
    }

    void AddColumn()
    {
        Grid.AddColumn(Fahrenheit);

        IsAddEnabled = false;
        IsDeleteEnabled = true;
        StateHasChanged();
    }

    void DeleteColumn()
    {
        Grid.RemoveColumn(Fahrenheit);

        IsAddEnabled = true;
        IsDeleteEnabled = false;
        StateHasChanged();
    }

    void ToggleColumn()
    {
        columnVisible = !columnVisible;
        StateHasChanged();
    }
}